800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	1)import fs from 'fs';
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	2)import path from 'path';
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	3)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	4)import gulp from 'gulp';
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	5)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	6)// Load all gulp plugins automatically
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	7)// and attach them to the `plugins` object
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	8)import plugins from 'gulp-load-plugins';
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	9)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	10)import archiver from 'archiver';
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	11)import glob from 'glob';
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	12)import del from 'del';
2ad70775	(Rob Larsen	2017-05-28 08:54:44 -0400	13)import modernizr from 'modernizr';
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	14)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	15)import pkg from './package.json';
2ad70775	(Rob Larsen	2017-05-28 08:54:44 -0400	16)import modernizrConfig from './modernizr-config.json';
2ad70775	(Rob Larsen	2017-05-28 08:54:44 -0400	17)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	18)const dirs = pkg['h5bp-configs'].directories;
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	19)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	20)// ---------------------------------------------------------------------
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	21)// | Helper tasks                                                      |
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	22)// ---------------------------------------------------------------------
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	23)
0fe68e9e	(   Sylvain	2019-08-29 14:43:43 -0400	24)gulp.task('archive:create_archive_dir', (done) => {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	25)  fs.mkdirSync(path.resolve(dirs.archive), '0755');
0fe68e9e	(   Sylvain	2019-08-29 14:43:43 -0400	26)  done();
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	27)});
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	28)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	29)gulp.task('archive:zip', (done) => {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	30)  const archiveName = path.resolve(dirs.archive, `${pkg.name}_v${pkg.version}.zip`);
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	31)  const zip = archiver('zip');
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	32)  const files = glob.sync('**/*.*', {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	33)    'cwd': dirs.dist,
6862fd31	(Vlad Tansky	2020-05-08 16:40:28 +0300	34)    'ignore': [
6862fd31	(Vlad Tansky	2020-05-08 16:40:28 +0300	35)      '**/node_modules/**',
6862fd31	(Vlad Tansky	2020-05-08 16:40:28 +0300	36)      'package-lock.json',
6862fd31	(Vlad Tansky	2020-05-08 16:40:28 +0300	37)      '**/dist/**',
6862fd31	(Vlad Tansky	2020-05-08 16:40:28 +0300	38)      '**/.cache/**',
6862fd31	(Vlad Tansky	2020-05-08 16:40:28 +0300	39)    ],
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	40)    'dot': true // include hidden files
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	41)  });
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	42)  const output = fs.createWriteStream(archiveName);
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	43)
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	44)  zip.on('error', (error) => {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	45)    done();
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	46)    throw error;
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	47)  });
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	48)
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	49)  output.on('close', done);
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	50)
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	51)  files.forEach((file) => {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	52)    const filePath = path.resolve(dirs.dist, file);
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	53)
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	54)    // `zip.bulk` does not maintain the file
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	55)    // permissions, so we need to add files individually
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	56)    zip.append(fs.createReadStream(filePath), {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	57)      'name': file,
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	58)      'mode': fs.statSync(filePath).mode
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	59)    });
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	60)  });
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	61)
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	62)  zip.pipe(output);
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	63)  zip.finalize();
0fe68e9e	(   Sylvain	2019-08-29 14:43:43 -0400	64)  done();
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	65)});
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	66)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	67)gulp.task('clean', (done) => {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	68)  del([
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	69)    dirs.archive,
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	70)    dirs.dist
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	71)  ]).then(() => {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	72)    done();
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	73)  });
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	74)});
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	75)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	76)gulp.task('copy:.htaccess', () =>
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	77)  gulp.src('node_modules/apache-server-configs/dist/.htaccess')
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	78)    .pipe(plugins().replace(/# ErrorDocument/g, 'ErrorDocument'))
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	79)    .pipe(gulp.dest(dirs.dist))
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	80));
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	81)
7523c417	(Thomas Vantuycom	2018-03-29 12:49:29 +0000	82)gulp.task('copy:index.html', () => {
1d2b155c	(Rob Larsen	2020-05-04 15:24:23 -0400	83)
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	84)  let modernizrVersion = pkg.devDependencies.modernizr;
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	85)
0fe68e9e	(   Sylvain	2019-08-29 14:43:43 -0400	86)  return gulp.src(`${dirs.src}/index.html`)
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	87)    .pipe(plugins().replace(/{{MODERNIZR_VERSION}}/g, modernizrVersion))
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	88)    .pipe(gulp.dest(dirs.dist));
7523c417	(Thomas Vantuycom	2018-03-29 12:49:29 +0000	89)});
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	90)
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	91)gulp.task('copy:license', () =>
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	92)  gulp.src('LICENSE.txt')
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	93)    .pipe(gulp.dest(dirs.dist))
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	94));
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	95)
7e67f887	(Damian Szczypka	2020-09-28 14:35:29 +0200	96)gulp.task('copy:style', () => {
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	97)  const banner = `/*! HTML5 Boilerplate v${pkg.version} | ${pkg.license} License | ${pkg.homepage} */\n\n`;
800a806f	(Marco Biedermann	2016-02-11 09:44:10 +0100	98)
0fe68e9e	(   Sylvain	2019-08-29 14:43:43 -0400	99)  return gulp.src('node_modules/main.css/dist/main.css')
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	100)    .pipe(plugins().header(banner))
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	101)    .pipe(plugins().autoprefixer({
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	102)      cascade: false
f121b530	(Rob Larsen	2018-04-06 17:31:27 -0400	103)    }))
7e67f887	(Damian Szczypka	2020-09-28 14:35:29 +0200	104)    .pipe(plugins().rename({
7e67f887	(Damian Szczypka	2020-09-28 14:35:29 +0200	105)     